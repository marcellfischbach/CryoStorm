<converters>
    <converter>
        <types>
            <type>csVector2f</type>
            <type>cs::csVector2f</type>
        </types>
        <in-arguments>
            <argument jtype="jfloat" id="x" suffix="X"/>
            <argument jtype="jfloat" id="y" suffix="Y"/>
        </in-arguments>
        <out-arguments>
            <argument jtype="jfloatArray" id="out"/>
        </out-arguments>
        <in-conversion>
            cs::csVector2f ${csArg} (${x}, ${y});
        </in-conversion>
        <out-conversion returnType="void" fullQualifiedType="cs::csVector2f">
            jfloat *${csTmp} = env->GetFloatArrayElements(${out}, 0);
            ${csTmp}[0] = ${csRet}.x;
            ${csTmp}[1] = ${csRet}.y;
            env->ReleaseFloatArrayElements(${out}, ${csTmp}, 0);
        </out-conversion>
    </converter>
    <converter>
        <types>
            <type>csVector3f</type>
            <type>cs::csVector3f</type>
        </types>
        <in-arguments>
            <argument jtype="jfloat" id="x" suffix="X"/>
            <argument jtype="jfloat" id="y" suffix="Y"/>
            <argument jtype="jfloat" id="z" suffix="Z"/>
        </in-arguments>
        <out-arguments>
            <argument jtype="jfloatArray" id="out"/>
        </out-arguments>
        <in-conversion>
            cs::csVector3f ${csArg} (${x}, ${y}, ${z});
        </in-conversion>
        <out-conversion returnType="void" fullQualifiedType="cs::csVector3f">
            jfloat *${csTmp} = env->GetFloatArrayElements(${out}, 0);
            ${csTmp}[0] = ${csRet}.x;
            ${csTmp}[1] = ${csRet}.y;
            ${csTmp}[2] = ${csRet}.z;
            env->ReleaseFloatArrayElements(${out}, ${csTmp}, 0);
        </out-conversion>
    </converter>
    <converter>
        <types>
            <type>csVector4f</type>
            <type>cs::csVector4f</type>
        </types>
        <in-arguments>
            <argument jtype="jfloat" id="x" suffix="X"/>
            <argument jtype="jfloat" id="y" suffix="Y"/>
            <argument jtype="jfloat" id="z" suffix="Z"/>
            <argument jtype="jfloat" id="w" suffix="W"/>
        </in-arguments>
        <out-arguments>
            <argument jtype="jfloatArray" id="out"/>
        </out-arguments>
        <in-conversion>
            cs::csVector4f ${csArg} (${x}, ${y}, ${z}, ${w});
        </in-conversion>
        <out-conversion returnType="void" fullQualifiedType="cs::csVector4f">
            jfloat *${csTmp} = env->GetFloatArrayElements(${out}, 0);
            ${csTmp}[0] = ${csRet}.x;
            ${csTmp}[1] = ${csRet}.y;
            ${csTmp}[2] = ${csRet}.z;
            ${csTmp}[3] = ${csRet}.w;
            env->ReleaseFloatArrayElements(${out}, ${csTmp}, 0);
        </out-conversion>
    </converter>
    
    <converter>
        <types>
            <type>csColor4f</type>
            <type>cs::csColor4f</type>
        </types>
        <in-arguments>
            <argument jtype="jfloat" id="r" suffix="R"/>
            <argument jtype="jfloat" id="g" suffix="G"/>
            <argument jtype="jfloat" id="b" suffix="B"/>
            <argument jtype="jfloat" id="a" suffix="A"/>
        </in-arguments>
        <out-arguments>
            <argument jtype="jfloatArray" id="out"/>
        </out-arguments>
        <in-conversion >
            cs::csColor4f ${csArg} (${r}, ${g}, ${b}, ${a});
        </in-conversion>
        <out-conversion returnType="void" fullQualifiedType="cs::csColor4f">
            jfloat *${csTmp} = env->GetFloatArrayElements(${out}, 0);
            ${csTmp}[0] = ${csRet}.r;
            ${csTmp}[1] = ${csRet}.g;
            ${csTmp}[2] = ${csRet}.b;
            ${csTmp}[3] = ${csRet}.a;
            env->ReleaseFloatArrayElements(${out}, ${csTmp}, 0);
        </out-conversion>
    </converter>

    <converter>
        <types>
            <type>csMatrix3f</type>
            <type>cs::csMatrix3f</type>
        </types>
        <in-arguments>
            <argument jtype="jfloatArray" id="in"/>
        </in-arguments>
        <out-arguments>
            <argument jtype="jfloatArray" id="out"/>
        </out-arguments>
        <in-conversion>
            jfloat *${csTmp} = env->GetFloatArrayElements(${in}, 0);
            cs::csMatrix3f ${csArg} (${csTmp}[0], ${csTmp}[1], ${csTmp}[2],
                                     ${csTmp}[3], ${csTmp}[4], ${csTmp}[5],
                                     ${csTmp}[6], ${csTmp}[7], ${csTmp}[8]);
            env->ReleaseFloatArrayElements(${in}, ${csTmp}, 0);

        </in-conversion>
        <out-conversion returnType="void" fullQualifiedType="cs::csMatrix3f">
            jfloat *${csTmp} = env->GetFloatArrayElements(${out}, 0);
            ${csTmp}[0] = ${csRet}.m00;
            ${csTmp}[1] = ${csRet}.m01;
            ${csTmp}[2] = ${csRet}.m02;
            ${csTmp}[3] = ${csRet}.m10;
            ${csTmp}[4] = ${csRet}.m11;
            ${csTmp}[5] = ${csRet}.m12;
            ${csTmp}[6] = ${csRet}.m20;
            ${csTmp}[7] = ${csRet}.m21;
            ${csTmp}[8] = ${csRet}.m22;
            env->ReleaseFloatArrayElements(${out}, ${csTmp}, 0);
        </out-conversion>
    </converter>

    <converter>
        <types>
            <type>csMatrix4f</type>
            <type>cs::csMatrix4f</type>
        </types>
        <in-arguments>
            <argument jtype="jfloatArray" id="in"/>
        </in-arguments>
        <out-arguments>
            <argument jtype="jfloatArray" id="out"/>
        </out-arguments>
        <in-conversion>
            jfloat *${csTmp} = env->GetFloatArrayElements(${in}, 0);
            cs::csMatrix4f ${csArg} (${csTmp}[0], ${csTmp}[1], ${csTmp}[2],${csTmp}[3],
                                     ${csTmp}[4], ${csTmp}[5], ${csTmp}[6], ${csTmp}[7],
                                     ${csTmp}[8], ${csTmp}[9], ${csTmp}[10], ${csTmp}[11],
                                     ${csTmp}[12], ${csTmp}[13], ${csTmp}[14], ${csTmp}[15]);
            env->ReleaseFloatArrayElements(${in}, ${csTmp}, 0);

        </in-conversion>
        <out-conversion returnType="void" fullQualifiedType="cs::csMatrix3f">
            jfloat *${csTmp} = env->GetFloatArrayElements(${out}, 0);
            ${csTmp}[0] = ${csRet}.m00;
            ${csTmp}[1] = ${csRet}.m01;
            ${csTmp}[2] = ${csRet}.m02;
            ${csTmp}[3] = ${csRet}.m03;
            ${csTmp}[4] = ${csRet}.m10;
            ${csTmp}[5] = ${csRet}.m11;
            ${csTmp}[6] = ${csRet}.m12;
            ${csTmp}[7] = ${csRet}.m13;
            ${csTmp}[8] = ${csRet}.m20;
            ${csTmp}[9] = ${csRet}.m21;
            ${csTmp}[10] = ${csRet}.m22;
            ${csTmp}[11] = ${csRet}.m23;
            ${csTmp}[12] = ${csRet}.m30;
            ${csTmp}[13] = ${csRet}.m31;
            ${csTmp}[14] = ${csRet}.m32;
            ${csTmp}[15] = ${csRet}.m33;
            env->ReleaseFloatArrayElements(${out}, ${csTmp}, 0);
        </out-conversion>
    </converter>

    <converter>
        <types>
            <type>iTexture2D::Descriptor</type>
            <type>cs::iTexture2D::Descriptor</type>
        </types>
        <in-arguments>
            <argument jtype="jint" id="format" suffix="Format"/>
            <argument jtype="jint" id="width" suffix="Width"/>
            <argument jtype="jint" id="height" suffix="Height"/>
            <argument jtype="jboolean" id="mipMaps" suffix="MipMaps"/>
            <argument jtype="jint" id="multiSamples" suffix="MultiSamples"/>
        </in-arguments>
        <out-arguments>
        </out-arguments>
        <in-conversion><![CDATA[
    cs::iTexture2D::Descriptor ${csArg} {
        static_cast<cs::ePixelFormat>(${format}),
        static_cast<uint16_t>(${width}),
        static_cast<uint16_t>(${height}),
        static_cast<bool>(${mipMaps}),
        static_cast<uint16_t>(${multiSamples})
    };
            ]]>
        </in-conversion>
        <out-conversion returnType="void" fullQualifiedType="cs::iTexture2D::Descriptor">
            // fail for now
            #error "Not clear how to convert that"
        </out-conversion>
    </converter>
</converters>